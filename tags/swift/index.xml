<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on Syed Zainulabideen</title>
    <link>https://syedzainulabideen.github.io/tags/swift/</link>
    <description>Recent content in Swift on Syed Zainulabideen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 31 Aug 2023 09:00:00 +0500</lastBuildDate><atom:link href="https://syedzainulabideen.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swift Generics</title>
      <link>https://syedzainulabideen.github.io/posts/swift-generics/</link>
      <pubDate>Thu, 31 Aug 2023 09:00:00 +0500</pubDate>
      
      <guid>https://syedzainulabideen.github.io/posts/swift-generics/</guid>
      <description>Term &amp;lsquo;generic&amp;rsquo; in programming lanugage used to represent an idea to write resuable and flexible code including classes, functions and types. And by resuablity and flexibility means that without worring about the type or comparomising the type safety you can reuse same code.
Let&amp;rsquo;s take a basic example to understand how reusability works.
func swapTwoValues&amp;lt;T&amp;gt;(_ a: inout T, _ b: inout T) { let temporaryA = a a = b b = temporaryA } In above example, function swapTwoValues accept two parameters to swap them.</description>
    </item>
    
  </channel>
</rss>
